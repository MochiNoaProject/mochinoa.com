---
description: ゲーム開発する際の規則
globs: **/*.*
alwaysApply: false
---
# ゲーム開発ルール

このドキュメントは、mochinoa.comにゲームを追加する際のルールを定義します。

## 基本原則

既存のコードベースへの影響を最小限に抑えるため、全てのゲーム関連の実装は `/app/games` ディレクトリ配下に限定します。

## ディレクトリ構造

```
/app/games/
  ├── {game-name}/          # 各ゲームの名前のディレクトリ
  │   ├── page.tsx          # ゲームのメインページ
  │   ├── page.module.css   # ゲーム固有のスタイル
  │   ├── components/       # ゲーム固有のコンポーネント
  │   ├── hooks/           # ゲーム固有のカスタムフック
  │   └── assets/          # ゲームで使用する画像等のアセット
```

## 実装ルール

1. **コンポーネントの独立性**
   - 各ゲームは独自のコンポーネント、スタイル、ロジックを持つ
   - 他のゲームやアプリケーションのコンポーネントに依存しない
   - 必要なライブラリやアセットは各ゲームのディレクトリ内に配置

2. **ルーティング**
   - 各ゲームは `/games/{game-name}` のURLでアクセス可能
   - Next.jsのApp Routerの規約に従い、`page.tsx`を使用

3. **状態管理**
   - ゲーム固有の状態は各ゲームのディレクトリ内で完結させる
   - グローバルな状態が必要な場合は、ゲームコンポーネント内でのみ使用

4. **共通機能の制限**
   - 共通のヘッダーやフッターなど、既存のレイアウトコンポーネントのみ使用可能
   - 新しい共通コンポーネントは作成しない

## 命名規則

1. **ディレクトリ名**
   - 全て小文字
   - 単語間はハイフン（-）で区切る
   - 例: `snake-game`, `tetris`, `puzzle-game`

2. **コンポーネント名**
   - PascalCase
   - 例: `GameBoard.tsx`, `ScoreDisplay.tsx`

3. **スタイル**
   - CSS Modulesを使用
   - `.module.css`拡張子を使用

## 注意事項

- 既存のコードベースの変更は禁止
- `/app/games` 以外のディレクトリへの変更は禁止
- 共通コンポーネントの新規作成は禁止 