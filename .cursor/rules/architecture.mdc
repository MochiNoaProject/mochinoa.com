---
description: 
globs: 
alwaysApply: true
---
# アーキテクチャルール

## 1. ディレクトリ構造
- `app/`: Next.js 13以降のApp Routerを使用したページコンポーネントを配置
- `components/`: 再利用可能な共通コンポーネントを配置
- `styles/`: グローバルスタイルやテーマ設定を配置
- `data/`: 静的データやAPI関連のデータ型定義を配置

## 2. コンポーネント設計
- ページコンポーネントは`app`ディレクトリ内に配置
- 再利用可能なUIコンポーネントは`components`ディレクトリに配置
- コンポーネント固有のスタイルは`.module.css`ファイルとして同じディレクトリに配置
- コンポーネントは機能単位でディレクトリを分割

## 3. 命名規則
- コンポーネントファイル: PascalCase（例：`AppHeader.tsx`）
- スタイルモジュール: コンポーネントと同名で`.module.css`を付加
- ページコンポーネント: `page.tsx`
- レイアウトコンポーネント: `layout.tsx`

## 4. 型定義
- TypeScriptの型定義は厳密に行う
- コンポーネント固有の型は同じファイル内で定義

## 5. ルーティング
- App Routerの規約に従ったファイル配置
- 動的ルーティングは`[param]`形式のディレクトリで実装
- パラレルルーティングは`@folder`形式で実装

## 6. スタイリング
- CSS Modulesを使用してスコープを限定
- グローバルスタイルは`app/global.css`に定義
- レスポンシブデザインを考慮したスタイリング

## 7. パフォーマンス
- 適切なコンポーネントの分割とLazy Loading
- 画像の最適化にNext.jsの`Image`コンポーネントを使用
- パフォーマンスメトリクスの監視

## 8. セキュリティ
- 環境変数は`.env`ファイルで管理
- APIキーなどの機密情報は公開リポジトリにコミットしない
- 適切なCSRF対策とXSS対策

